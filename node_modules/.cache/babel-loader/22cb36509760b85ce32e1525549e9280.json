{"ast":null,"code":"var _jsxFileName = \"/Users/de1uze/Desktop/Netflix-clone/src/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from './axios';\nimport './Row.css';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nconst Row = _ref => {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    // if [], run once when the row loads, and don't run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      // example: https://api.themoviedb.org/3/discover/tv?api_key=e9e04011c3ee171084895edf5a3d2e04&with_networks=213\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","YouTube","axios","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"sources":["/Users/de1uze/Desktop/Netflix-clone/src/Row.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\nimport YouTube from 'react-youtube';\nimport axios from './axios'\nimport './Row.css'\nimport movieTrailer from 'movie-trailer';\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst Row = ({title, fetchUrl, isLargeRow}) => {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\n\n    useEffect( () => {\n        // if [], run once when the row loads, and don't run again\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            // example: https://api.themoviedb.org/3/discover/tv?api_key=e9e04011c3ee171084895edf5a3d2e04&with_networks=213\n            setMovies(request.data.results)\n            return request\n        } \n        fetchData();\n    }, [fetchUrl]);\n\n    const opts ={\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n            autoplay: 1,\n        }\n    } \n\n    const handleClick = (movie) => {\n        if (trailerUrl) {\n            setTrailerUrl('')\n        } else {\n            movieTrailer(movie?.name || \"\")\n            .then( (url) => {\n                const urlParams = new URLSearchParams( new URL(url).search )\n                setTrailerUrl(urlParams.get('v'))\n            })\n            .catch( (error) => console.log(error))\n        }\n    }\n\n  return (\n    <div className='row'>\n        <h2>{title}</h2>\n        <div className=\"row__posters\">\n            {/* several row posters */}\n            {movies.map( movie => (\n                <img\n                    key={movie.id}\n                    onClick={ () => handleClick(movie)}\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n                    src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n                    alt={movie.name} />\n            ))}\n        </div>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n\n\n    </div>\n  )\n}\n\nexport default Row"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,eAAe;AAAC;AAEzC,MAAMC,QAAQ,GAAG,sCAAsC;AAEvD,MAAMC,GAAG,GAAG,QAAmC;EAAA;EAAA,IAAlC;IAACC,KAAK;IAAEC,QAAQ;IAAEC;EAAU,CAAC;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEhDC,SAAS,CAAE,MAAM;IACb;IACA,eAAea,SAAS,GAAG;MACvB,MAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACR,QAAQ,CAAC;MACzC;MACAG,SAAS,CAACI,OAAO,CAACE,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOH,OAAO;IAClB;IACAD,SAAS,EAAE;EACf,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAEd,MAAMW,IAAI,GAAE;IACRC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;MACRC,QAAQ,EAAE;IACd;EACJ,CAAC;EAED,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAC3B,IAAIb,UAAU,EAAE;MACZC,aAAa,CAAC,EAAE,CAAC;IACrB,CAAC,MAAM;MACHT,YAAY,CAAC,CAAAqB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,IAAI,KAAI,EAAE,CAAC,CAC9BC,IAAI,CAAGC,GAAG,IAAK;QACZ,MAAMC,SAAS,GAAG,IAAIC,eAAe,CAAE,IAAIC,GAAG,CAACH,GAAG,CAAC,CAACI,MAAM,CAAE;QAC5DnB,aAAa,CAACgB,SAAS,CAACb,GAAG,CAAC,GAAG,CAAC,CAAC;MACrC,CAAC,CAAC,CACDiB,KAAK,CAAGC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IAC1C;EACJ,CAAC;EAEH,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAChB;MAAA,UAAK3B;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eAChB;MAAK,SAAS,EAAC,cAAc;MAAA,UAExBG,MAAM,CAAC2B,GAAG,CAAEZ,KAAK,iBACd;QAEI,OAAO,EAAG,MAAMD,WAAW,CAACC,KAAK,CAAE;QACnC,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAAE;QAC7D,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAGgB,KAAK,CAACa,WAAW,GAAGb,KAAK,CAACc,aAAc,EAAE;QAC1E,GAAG,EAAEd,KAAK,CAACC;MAAK,GAJXD,KAAK,CAACe,EAAE;QAAA;QAAA;QAAA;MAAA,QAKpB;IAAC;MAAA;MAAA;MAAA;IAAA,QACA,EACL5B,UAAU,iBAAI,QAAC,OAAO;MAAC,OAAO,EAAEA,UAAW;MAAC,IAAI,EAAEO;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAGzD;AAEV,CAAC;AAAA,GAvDKb,GAAG;AAAA,KAAHA,GAAG;AAyDT,eAAeA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}